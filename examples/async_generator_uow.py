#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Unit of Work —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ Skuf.

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ @asynccontextmanager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UoW
2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ async_generator_factory
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ AsyncGeneratorDependency
"""

import asyncio
import logging
from contextlib import asynccontextmanager
from typing import AsyncGenerator
from skuf import DIContainer, AsyncGeneratorDependency

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


class IUnitOfWork:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Unit of Work."""
    
    def __init__(self):
        self.operations = []
        self.committed = False
        self.rolled_back = False
    
    def add_operation(self, operation: str):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ UoW."""
        self.operations.append(operation)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}")
    
    def commit(self):
        """–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é."""
        self.committed = True
        logger.debug(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: {self.operations}")
    
    def rollback(self):
        """–û—Ç–∫–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é."""
        self.rolled_back = True
        logger.debug(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—á–µ–Ω–∞: {self.operations}")


class SQLAlchemyUnitOfWork(IUnitOfWork):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è UoW –¥–ª—è SQLAlchemy."""
    
    def __init__(self, session_factory):
        super().__init__()
        self.session_factory = session_factory
        self.session = None
    
    def __enter__(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä."""
        self.session = self.session_factory()
        logger.debug("SQLAlchemy —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        if exc_type is None:
            self.commit()
        else:
            self.rollback()
        
        if self.session:
            self.session.close()
            logger.debug("SQLAlchemy —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
        return False


class SessionFactory:
    """–§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π SQLAlchemy."""
    
    def __init__(self):
        self.connection_count = 0
    
    def create_session(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é."""
        self.connection_count += 1
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è #{self.connection_count}")
        return f"Session-{self.connection_count}"


# –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
session_factory = SessionFactory()


@asynccontextmanager
async def get_uow() -> AsyncGenerator[IUnitOfWork, None]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è UoW.
    
    –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π:
    1. –°–æ–∑–¥–∞–µ—Ç UoW
    2. –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç UoW —á–µ—Ä–µ–∑ yield
    4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–∏—Ç–∏—Ç –∏–ª–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    """
    logger.debug('üöÄ UnitOfWork started')
    
    # –°–æ–∑–¥–∞–µ–º UoW —Å —Å–µ—Å—Å–∏–µ–π
    uow = SQLAlchemyUnitOfWork(session_factory)
    
    try:
        # –í—Ö–æ–¥–∏–º –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
        with uow:
            logger.debug('üìù UnitOfWork –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
            yield uow
            logger.debug('‚úÖ UnitOfWork completed successfully')
    except Exception as e:
        logger.error(f'‚ùå UnitOfWork failed: {e}')
        raise
    finally:
        logger.debug('üîö UnitOfWork cleanup completed')


async def business_logic_success():
    """–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Å —É—Å–ø–µ—à–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º."""
    print("\n=== –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Å —É—Å–ø–µ—à–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º ===")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncGeneratorDependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è UoW
    async for uow in AsyncGeneratorDependency(IUnitOfWork):
        uow.add_operation("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        uow.add_operation("–û—Ç–ø—Ä–∞–≤–∏—Ç—å email")
        uow.add_operation("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        # –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã


async def business_logic_with_error():
    """–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Å –æ—à–∏–±–∫–æ–π - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–∞—Ç–∞."""
    print("\n=== –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Å –æ—à–∏–±–∫–æ–π ===")
    
    try:
        async for uow in AsyncGeneratorDependency(IUnitOfWork):
            uow.add_operation("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            uow.add_operation("–û—Ç–ø—Ä–∞–≤–∏—Ç—å email")
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            raise ValueError("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
    except ValueError as e:
        print(f"–ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def multiple_operations():
    """–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º UoW."""
    print("\n=== –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ===")
    
    async for uow in AsyncGeneratorDependency(IUnitOfWork):
        # –ì—Ä—É–ø–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π 1
        uow.add_operation("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        uow.add_operation("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        
        # –ì—Ä—É–ø–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π 2
        uow.add_operation("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π email")
        uow.add_operation("–î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫—É")
        
        # –ì—Ä—É–ø–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π 3
        uow.add_operation("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        uow.add_operation("–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Unit of Work —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ Skuf")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    DIContainer.register(IUnitOfWork, async_generator_factory=get_uow)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    await business_logic_success()
    await business_logic_with_error()
    await multiple_operations()
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(main())
